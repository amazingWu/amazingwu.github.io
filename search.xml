<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[maven多级项目使用slf4j+log4j，以及自定义配置文件路径]]></title>
      <url>/2017/04/09/maven%E5%A4%9A%E7%BA%A7%E9%A1%B9%E7%9B%AE%E4%BD%BF%E7%94%A8slf4j+log4j%E4%BB%A5%E5%8F%8A%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84%20-%20%E5%89%AF%E6%9C%AC/</url>
      <content type="html"><![CDATA[<h2 id="maven多级项目使用-slf4j-log4j，以及自定义配置文件路径"><a href="#maven多级项目使用-slf4j-log4j，以及自定义配置文件路径" class="headerlink" title="maven多级项目使用 slf4j+log4j，以及自定义配置文件路径"></a>maven多级项目使用 slf4j+log4j，以及自定义配置文件路径</h2><p>我的maven多级结构如下：</p>
<pre><code>sysimple
    |--integration
    |--commons
        |--pom.xml
    |--plugins
        |--pom.xml
    |--web
        |--pom.xml
    |--pom.xml
</code></pre><p>其中依赖情况是：<br>web依赖于commons和plugins。plugins依赖于commons。integration中定义了打包的方法与资源文件。</p>
<p>首先在sysimple/pom.xml中管理slf4j的版本：</p>
<pre><code>在&lt;dependencyManagement&gt;&lt;/dependencyManagement&gt;中间添加：
    &lt;dependency&gt;
         &lt;groupId&gt;org.slf4j&lt;/groupId&gt;
         &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt;
         &lt;version&gt;1.7.7&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
         &lt;groupId&gt;org.slf4j&lt;/groupId&gt;
         &lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt;
         &lt;version&gt;1.7.7&lt;/version&gt;
    &lt;/dependency&gt;
</code></pre><p>由于所有的模块均引用commons，因此只需要在commons中添加slf4j的依赖即可：</p>
<pre><code>&lt;dependency&gt;
     &lt;groupId&gt;org.slf4j&lt;/groupId&gt;
     &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
     &lt;groupId&gt;org.slf4j&lt;/groupId&gt;
     &lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt;
&lt;/dependency&gt;
</code></pre><p>下面即可使用slf4j，在需要使用的地方以如下方式使用：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public class StartWeb &#123;</div><div class="line">	private static final Logger logger = LoggerFactory.getLogger(StartWeb.class);</div><div class="line">	public static void main(String[] args)&#123;</div><div class="line">		logger.info(&quot;this is a example&quot;);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>默认情况下，slf4j-log4j会在src/main/java中查找log4j.properties，如果需要指定配置文件的位置，需要在启动时手动加入Jvm的参数，我的例子中添加了-Dlog4j.configuration=file:../integration/conf/sysimple-log4j.properties。在使用绝对路径时是不需要使用file:的，linux端也不需要file:。在运行的时候，slf4j会根据你指定的路径去加载配置文件。配置文件的内容我给出以下例子， 读者可以另行查找配置文件的格式：</p>
<pre><code>log4j.rootLogger=INFO,system.out  
log4j.appender.system.out=org.apache.log4j.ConsoleAppender  
log4j.appender.system.out.layout=org.apache.log4j.PatternLayout  
log4j.appender.system.out.layout.ConversionPattern=SysimpleServer Logger--&gt;%5p{%F:%L}-%m%n 
log4j.logger.thisProject.file=INFO,thisProject.file.out  
log4j.appender.thisProject.file.out=org.apache.log4j.DailyRollingFileAppender
log4j.appender.thisProject.file.out.File=../integration/logs/sysimple-logs.log   
log4j.appender.thisProject.file.out.layout=org.apache.log4j.PatternLayout 
</code></pre>]]></content>
      
        <categories>
            
            <category> maven </category>
            
        </categories>
        
        
        <tags>
            
            <tag> maven </tag>
            
            <tag> log4j </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[maven多级项目使用slf4j+log4j，以及自定义配置文件路径]]></title>
      <url>/2017/04/09/maven%E6%89%93%E9%80%A0%E5%8F%AF%E6%89%A7%E8%A1%8Cjar%E5%8C%85/</url>
      <content type="html"><![CDATA[<h1 id="maven打造可执行war包"><a href="#maven打造可执行war包" class="headerlink" title="maven打造可执行war包"></a>maven打造可执行war包</h1><p>在开发java Web时，有时我们会使用嵌入式jetty来运行，项目完成后，如果能够直接运行war包从而启动jetty来运行war包那就非常完美了，本文将讲解如何在项目中整合jetty 9，并构造可执行的war包（打包前和打包后都能随时启动）。</p>
<p>1.首先添加jetty 9的依赖（本文暂时只用到了jetty的以下依赖，读者根据自己的项目需要增加）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;org.eclipse.jetty&lt;/groupId&gt;</div><div class="line">	&lt;artifactId&gt;jetty-server&lt;/artifactId&gt;</div><div class="line">	&lt;version&gt;9.2.7.v20150116&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;org.eclipse.jetty&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;jetty-webapp&lt;/artifactId&gt;</div><div class="line">    &lt;version&gt;9.2.7.v20150116&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure></p>
<p>2.项目中使用jetty 9。</p>
<p>首先我封装了自己的JettyServer</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">public class EmbeddedServer &#123;</div><div class="line">    //public static final Logger logger = LoggerFactory.getLogger(EmbeddedServer.class);</div><div class="line">   // private static final int DEFAULT_BUFFER_SIZE = 16192;</div><div class="line"></div><div class="line">    protected final Server server = new Server();</div><div class="line"></div><div class="line">    </div><div class="line">    public EmbeddedServer(int port,String path) throws IOException&#123;</div><div class="line">    	this(port,path,false,null);</div><div class="line">    &#125;</div><div class="line">    /**</div><div class="line">     * use war to start</div><div class="line">     * @param port</div><div class="line">     * @param isWar</div><div class="line">     * @param warPath</div><div class="line">     * @throws IOException</div><div class="line">     */</div><div class="line">    public EmbeddedServer(int port,boolean isWar,String warPath) throws IOException&#123;</div><div class="line">    	this(port,null,isWar,warPath);</div><div class="line">    &#125;</div><div class="line">    private EmbeddedServer(int port, String path,boolean isWar,String warPath) throws IOException &#123;</div><div class="line">        Connector connector = getConnector(port);</div><div class="line">        server.addConnector(connector);</div><div class="line">        WebAppContext application = getWebAppContext(path,isWar,warPath);</div><div class="line">        server.setHandler(application);</div><div class="line">        server.setStopAtShutdown(true);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    protected WebAppContext getWebAppContext(String path,boolean isWar,String warPath) &#123;</div><div class="line">    	WebAppContext application;</div><div class="line">    	if(isWar)&#123;</div><div class="line">    		application=new WebAppContext();</div><div class="line">    		application.setWar(warPath);</div><div class="line">    		return application;</div><div class="line">        &#125;else&#123;</div><div class="line">            application = new WebAppContext(path, &quot;/&quot;);</div><div class="line">            application.setConfigurationDiscovered(true);</div><div class="line">            application.setParentLoaderPriority(true);</div><div class="line">            application.setClassLoader(Thread.currentThread().getContextClassLoader());</div><div class="line">            return application;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    protected Connector getConnector(int port) throws IOException &#123;</div><div class="line">        HttpConfiguration http_config = new HttpConfiguration();</div><div class="line">        // this is to enable large header sizes when Kerberos is enabled with AD</div><div class="line">        //final int bufferSize = getBufferSize();</div><div class="line">        //http_config.setResponseHeaderSize(bufferSize);</div><div class="line">        //http_config.setRequestHeaderSize(bufferSize);</div><div class="line"></div><div class="line">        ServerConnector connector = new ServerConnector(server, new HttpConnectionFactory(http_config));</div><div class="line">        connector.setPort(port);</div><div class="line">        connector.setHost(&quot;0.0.0.0&quot;);</div><div class="line">        server.addConnector(connector);</div><div class="line">        return connector;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /*protected Integer getBufferSize() &#123;</div><div class="line">        try &#123;</div><div class="line">            Configuration configuration = ApplicationProperties.get();</div><div class="line">            return configuration.getInt(&quot;sysimple.jetty.request.buffer.size&quot;, DEFAULT_BUFFER_SIZE);</div><div class="line">        &#125; catch (Exception e) &#123;</div><div class="line">            // do nothing</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        return DEFAULT_BUFFER_SIZE;</div><div class="line">    &#125;*/</div><div class="line"></div><div class="line">    public void start() throws Exception &#123;</div><div class="line">        server.start();  </div><div class="line">        //logger.info(&quot;********************************************************&quot;);</div><div class="line">        //logger.info(&quot;The SySimple Has Started !!!&quot;);</div><div class="line">        server.join();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void stop() &#123;</div><div class="line">        try &#123;</div><div class="line">            server.stop();</div><div class="line">        &#125; catch (Exception e) &#123;</div><div class="line">            //logger.warn(&quot;Error during shutdown&quot;, e);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接着可以使用封装好的EmbeddedServer来启动war</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">public class StartWeb&#123;</div><div class="line">	private static EmbeddedServer embeddedServer;</div><div class="line">	public static void main(String[] args)&#123;</div><div class="line">	//Start web server</div><div class="line">	int port=3000；</div><div class="line">        try&#123;</div><div class="line">        	if(args.length==0)&#123;</div><div class="line">        	    //该方式能够在开发时快速启动</div><div class="line">            	embeddedServer=new EmbeddedServer(port, &quot;src/main/webapp&quot;);</div><div class="line">            &#125;else&#123;</div><div class="line">                //传入war包的路径，该方法能够在打包完成后启动该war包</div><div class="line">            	embeddedServer=new EmbeddedServer(port, true, args[0]);</div><div class="line">            &#125;</div><div class="line">        	embeddedServer.start();</div><div class="line">        &#125;catch(Exception e)&#123;</div><div class="line">        	System.exit(0);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意：打包后如果需要启动war包，需要使用如下的这种批处理命令来启动：</p>
<p>以批处理命令（start.bat）和server.war在同级目录下为例：（以下是start.bat的内容）</p>
<pre><code>@echo off
set bat_dir=%~dp0
java -jar  %bat_dir%/web.war %bat_dir%/web.war
</code></pre><p>读者可以考虑在代码中得到war包的路径，这样可以在启动时省去传参。</p>
<ol>
<li>下面是最重要的：使用Maven构建可执行war包</li>
</ol>
<p>总的来说可执行war包是将war包的结构仿照jar包的结构进行改变，第一个是需要在manifest中标记出主方法，第二个是编译后的代码（包，而非.class）必须放在war包的最外层，最后要能够找到项目的依赖。</p>
<p>①标记主方法</p>
<p>通过maven-war-plugin在manifest中标记主方法入口</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;plugin&gt;  </div><div class="line">            &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;  </div><div class="line">            &lt;artifactId&gt;maven-war-plugin&lt;/artifactId&gt;  </div><div class="line">            &lt;configuration&gt;</div><div class="line">                &lt;archive&gt;</div><div class="line">                    &lt;manifest&gt;</div><div class="line">                        &lt;mainClass&gt;org.bit.linc.web.commons.StartWeb&lt;/mainClass&gt;</div><div class="line">                    &lt;/manifest&gt;</div><div class="line">                &lt;/archive&gt;</div><div class="line">            &lt;/configuration&gt;</div><div class="line">         &lt;/plugin&gt;</div></pre></td></tr></table></figure>
<p>②拷贝（也可以移动）web的所有的代码到war包最外层（使用maven-antrun-plugin）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&lt;plugin&gt;</div><div class="line">    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;  </div><div class="line">    &lt;artifactId&gt;maven-antrun-plugin&lt;/artifactId&gt;  </div><div class="line">    &lt;executions&gt;</div><div class="line">        &lt;execution&gt;  </div><div class="line">            &lt;id&gt;main-class-placement&lt;/id&gt;  </div><div class="line">            &lt;phase&gt;prepare-package&lt;/phase&gt;  </div><div class="line">            &lt;configuration&gt;  </div><div class="line">                &lt;target&gt;</div><div class="line">                    &lt;copy todir=&quot;$&#123;project.build.directory&#125;/$&#123;project.artifactId&#125;/&quot;&gt;  </div><div class="line">                        &lt;fileset dir=&quot;$&#123;project.build.directory&#125;/classes/&quot;&gt;  </div><div class="line">                            &lt;include name=&quot;**/*.*&quot; /&gt;</div><div class="line">                        &lt;/fileset&gt;  </div><div class="line">                    &lt;/copy&gt;</div><div class="line">                &lt;/target&gt;  </div><div class="line">            &lt;/configuration&gt;  </div><div class="line">            &lt;goals&gt;</div><div class="line">                &lt;goal&gt;run&lt;/goal&gt;  </div><div class="line">            &lt;/goals&gt;</div><div class="line">        &lt;/execution&gt;  </div><div class="line">    &lt;/executions&gt;  </div><div class="line">&lt;/plugin&gt;</div></pre></td></tr></table></figure>
<p>③ 标记所有依赖的位置（将代码拷贝到war最外层后，会出现依赖的类都找不到的情况，因此需要让war包能够查找到这些依赖）</p>
<p>将maven-war-plugin更改为如下内容：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;plugin&gt;  </div><div class="line">            &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;  </div><div class="line">            &lt;artifactId&gt;maven-war-plugin&lt;/artifactId&gt;  </div><div class="line">            &lt;configuration&gt;</div><div class="line">                &lt;archive&gt;</div><div class="line">                    &lt;manifest&gt;</div><div class="line">                        &lt;mainClass&gt;org.bit.linc.web.commons.StartWeb&lt;/mainClass&gt;</div><div class="line">                        &lt;addClasspath&gt;true&lt;/addClasspath&gt;</div><div class="line">                        &lt;classpathPrefix&gt;WEB-INF/lib&lt;/classpathPrefix&gt;</div><div class="line">                    &lt;/manifest&gt;</div><div class="line">                &lt;/archive&gt;</div><div class="line">            &lt;/configuration&gt;</div><div class="line">         &lt;/plugin&gt;</div></pre></td></tr></table></figure>
<p>现在可以构建可执行war包了。</p>
<p>以笔者的项目为例：<br>构建的war包中META-INF/MANIFEST.MF会变成如下内容：</p>
<pre><code>Manifest-Version: 1.0
Built-By: wubo
Build-Jdk: 1.7.0_17
Class-Path: WEB-INF/lib/commons-0.0.2.jar WEB-INF/lib/commons-configur
 ation-1.8.jar WEB-INF/lib/commons-lang-2.6.jar WEB-INF/lib/commons-lo
 gging-1.1.1.jar WEB-INF/lib/slf4j-api-1.7.7.jar WEB-INF/lib/slf4j-log
 4j12-1.7.7.jar WEB-INF/lib/log4j-1.2.17.jar WEB-INF/lib/plugins-0.0.2
 .jar WEB-INF/lib/clusters-0.0.2.jar WEB-INF/lib/monitors-0.0.2.jar WE
 B-INF/lib/jetty-server-9.2.7.v20150116.jar WEB-INF/lib/javax.servlet-
 api-3.1.0.jar WEB-INF/lib/jetty-http-9.2.7.v20150116.jar WEB-INF/lib/
 jetty-util-9.2.7.v20150116.jar WEB-INF/lib/jetty-io-9.2.7.v20150116.j
 ar WEB-INF/lib/jetty-webapp-9.2.7.v20150116.jar WEB-INF/lib/jetty-xml
 -9.2.7.v20150116.jar WEB-INF/lib/jetty-servlet-9.2.7.v20150116.jar WE
 B-INF/lib/jetty-security-9.2.7.v20150116.jar WEB-INF/lib/gson-2.3.1.j
 ar
Created-By: Apache Maven 3.3.9
Main-Class: org.bit.linc.web.commons.StartWeb
Archiver-Version: Plexus Archiver
</code></pre><p>其中的Class-Path和Main-Class均已经改变。</p>
]]></content>
      
        <categories>
            
            <category> maven </category>
            
        </categories>
        
        
        <tags>
            
            <tag> maven </tag>
            
            <tag> javaWeb </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
