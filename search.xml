<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[maven打造可执行war包]]></title>
      <url>/2017/04/07/maven%E6%89%93%E9%80%A0%E5%8F%AF%E6%89%A7%E8%A1%8Cjar%E5%8C%85/</url>
      <content type="html"><![CDATA[<p>在开发java Web时，有时我们会使用嵌入式jetty来运行，项目完成后，如果能够直接运行war包从而启动jetty来运行war包那就非常完美了，本文将讲解如何在项目中整合jetty 9，并构造可执行的war包（打包前和打包后都能随时启动）。<br><a id="more"></a><br>1.首先添加jetty 9的依赖（本文暂时只用到了jetty的以下依赖，读者根据自己的项目需要增加）<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.eclipse.jetty<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jetty-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>9.2.7.v20150116<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.eclipse.jetty<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jetty-webapp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>9.2.7.v20150116<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>2.项目中使用jetty 9。</p>
<p>首先我封装了自己的JettyServer</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmbeddedServer</span> </span>&#123;</div><div class="line">    <span class="comment">//public static final Logger logger = LoggerFactory.getLogger(EmbeddedServer.class);</span></div><div class="line">   <span class="comment">// private static final int DEFAULT_BUFFER_SIZE = 16192;</span></div><div class="line"></div><div class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> Server server = <span class="keyword">new</span> Server();</div><div class="line"></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EmbeddedServer</span><span class="params">(<span class="keyword">int</span> port,String path)</span> <span class="keyword">throws</span> IOException</span>&#123;</div><div class="line">    	<span class="keyword">this</span>(port,path,<span class="keyword">false</span>,<span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * use war to start</div><div class="line">     * <span class="doctag">@param</span> port</div><div class="line">     * <span class="doctag">@param</span> isWar</div><div class="line">     * <span class="doctag">@param</span> warPath</div><div class="line">     * <span class="doctag">@throws</span> IOException</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EmbeddedServer</span><span class="params">(<span class="keyword">int</span> port,<span class="keyword">boolean</span> isWar,String warPath)</span> <span class="keyword">throws</span> IOException</span>&#123;</div><div class="line">    	<span class="keyword">this</span>(port,<span class="keyword">null</span>,isWar,warPath);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">EmbeddedServer</span><span class="params">(<span class="keyword">int</span> port, String path,<span class="keyword">boolean</span> isWar,String warPath)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        Connector connector = getConnector(port);</div><div class="line">        server.addConnector(connector);</div><div class="line">        WebAppContext application = getWebAppContext(path,isWar,warPath);</div><div class="line">        server.setHandler(application);</div><div class="line">        server.setStopAtShutdown(<span class="keyword">true</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> WebAppContext <span class="title">getWebAppContext</span><span class="params">(String path,<span class="keyword">boolean</span> isWar,String warPath)</span> </span>&#123;</div><div class="line">    	WebAppContext application;</div><div class="line">    	<span class="keyword">if</span>(isWar)&#123;</div><div class="line">    		application=<span class="keyword">new</span> WebAppContext();</div><div class="line">    		application.setWar(warPath);</div><div class="line">    		<span class="keyword">return</span> application;</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            application = <span class="keyword">new</span> WebAppContext(path, <span class="string">"/"</span>);</div><div class="line">            application.setConfigurationDiscovered(<span class="keyword">true</span>);</div><div class="line">            application.setParentLoaderPriority(<span class="keyword">true</span>);</div><div class="line">            application.setClassLoader(Thread.currentThread().getContextClassLoader());</div><div class="line">            <span class="keyword">return</span> application;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> Connector <span class="title">getConnector</span><span class="params">(<span class="keyword">int</span> port)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        HttpConfiguration http_config = <span class="keyword">new</span> HttpConfiguration();</div><div class="line">        <span class="comment">// this is to enable large header sizes when Kerberos is enabled with AD</span></div><div class="line">        <span class="comment">//final int bufferSize = getBufferSize();</span></div><div class="line">        <span class="comment">//http_config.setResponseHeaderSize(bufferSize);</span></div><div class="line">        <span class="comment">//http_config.setRequestHeaderSize(bufferSize);</span></div><div class="line"></div><div class="line">        ServerConnector connector = <span class="keyword">new</span> ServerConnector(server, <span class="keyword">new</span> HttpConnectionFactory(http_config));</div><div class="line">        connector.setPort(port);</div><div class="line">        connector.setHost(<span class="string">"0.0.0.0"</span>);</div><div class="line">        server.addConnector(connector);</div><div class="line">        <span class="keyword">return</span> connector;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/*protected Integer getBufferSize() &#123;</span></div><div class="line">        try &#123;</div><div class="line">            Configuration configuration = ApplicationProperties.get();</div><div class="line">            return configuration.getInt("sysimple.jetty.request.buffer.size", DEFAULT_BUFFER_SIZE);</div><div class="line">        &#125; catch (Exception e) &#123;</div><div class="line">            // do nothing</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        return DEFAULT_BUFFER_SIZE;</div><div class="line">    &#125;*/</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        server.start();  </div><div class="line">        <span class="comment">//logger.info("********************************************************");</span></div><div class="line">        <span class="comment">//logger.info("The SySimple Has Started !!!");</span></div><div class="line">        server.join();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            server.stop();</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            <span class="comment">//logger.warn("Error during shutdown", e);</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接着可以使用封装好的EmbeddedServer来启动war</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> StartWeb&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> EmbeddedServer embeddedServer;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">	<span class="comment">//Start web server</span></div><div class="line">	<span class="keyword">int</span> port=<span class="number">3000</span>；</div><div class="line">        <span class="keyword">try</span>&#123;</div><div class="line">        	<span class="keyword">if</span>(args.length==<span class="number">0</span>)&#123;</div><div class="line">        	    <span class="comment">//该方式能够在开发时快速启动</span></div><div class="line">            	embeddedServer=<span class="keyword">new</span> EmbeddedServer(port, <span class="string">"src/main/webapp"</span>);</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                <span class="comment">//传入war包的路径，该方法能够在打包完成后启动该war包</span></div><div class="line">            	embeddedServer=<span class="keyword">new</span> EmbeddedServer(port, <span class="literal">true</span>, args[<span class="number">0</span>]);</div><div class="line">            &#125;</div><div class="line">        	embeddedServer.start();</div><div class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</div><div class="line">        	System.<span class="built_in">exit</span>(<span class="number">0</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意：打包后如果需要启动war包，需要使用如下的这种批处理命令来启动：</p>
<p>以批处理命令（start.bat）和server.war在同级目录下为例：（以下是start.bat的内容）</p>
<pre><code>@echo off
set bat_dir=%~dp0
java -jar  %bat_dir%/web.war %bat_dir%/web.war
</code></pre><p>读者可以考虑在代码中得到war包的路径，这样可以在启动时省去传参。</p>
<ol>
<li>下面是最重要的：使用Maven构建可执行war包</li>
</ol>
<p>总的来说可执行war包是将war包的结构仿照jar包的结构进行改变，第一个是需要在manifest中标记出主方法，第二个是编译后的代码（包，而非.class）必须放在war包的最外层，最后要能够找到项目的依赖。</p>
<p>①标记主方法</p>
<p>通过maven-war-plugin在manifest中标记主方法入口</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span>  </div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-war-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </div><div class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">archive</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">manifest</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>org.bit.linc.web.commons.StartWeb<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">archive</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line">         <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div></pre></td></tr></table></figure>
<p>②拷贝（也可以移动）web的所有的代码到war包最外层（使用maven-antrun-plugin）</p>
<figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-antrun-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">executions</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span>  </div><div class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>main-class-placement<span class="tag">&lt;/<span class="name">id</span>&gt;</span>  </div><div class="line">            <span class="tag">&lt;<span class="name">phase</span>&gt;</span>prepare-package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span>  </div><div class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span>  </div><div class="line">                <span class="tag">&lt;<span class="name">target</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">copy</span> <span class="attr">todir</span>=<span class="string">"$</span></span><span class="template-variable">&#123;project.build.directory&#125;</span><span class="xml"><span class="tag"><span class="string">/$</span></span></span><span class="template-variable">&#123;project.artifactId&#125;</span><span class="xml"><span class="tag"><span class="string">/"</span>&gt;</span>  </span></div><div class="line">                        <span class="tag">&lt;<span class="name">fileset</span> <span class="attr">dir</span>=<span class="string">"$</span></span><span class="template-variable">&#123;project.build.directory&#125;</span><span class="xml"><span class="tag"><span class="string">/classes/"</span>&gt;</span>  </span></div><div class="line">                            <span class="tag">&lt;<span class="name">include</span> <span class="attr">name</span>=<span class="string">"**/*.*"</span> /&gt;</span></div><div class="line">                        <span class="tag">&lt;/<span class="name">fileset</span>&gt;</span>  </div><div class="line">                    <span class="tag">&lt;/<span class="name">copy</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">target</span>&gt;</span>  </div><div class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span>  </div><div class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>run<span class="tag">&lt;/<span class="name">goal</span>&gt;</span>  </div><div class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div></pre></td></tr></table></figure>
<p>③ 标记所有依赖的位置（将代码拷贝到war最外层后，会出现依赖的类都找不到的情况，因此需要让war包能够查找到这些依赖）</p>
<p>将maven-war-plugin更改为如下内容：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span>  </div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-war-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </div><div class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">archive</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">manifest</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>org.bit.linc.web.commons.StartWeb<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">addClasspath</span>&gt;</span>true<span class="tag">&lt;/<span class="name">addClasspath</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">classpathPrefix</span>&gt;</span>WEB-INF/lib<span class="tag">&lt;/<span class="name">classpathPrefix</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">archive</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line">         <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div></pre></td></tr></table></figure>
<p>现在可以构建可执行war包了。</p>
<p>以笔者的项目为例：<br>构建的war包中META-INF/MANIFEST.MF会变成如下内容：</p>
<pre><code>Manifest-Version: 1.0
Built-By: wubo
Build-Jdk: 1.7.0_17
Class-Path: WEB-INF/lib/commons-0.0.2.jar WEB-INF/lib/commons-configur
 ation-1.8.jar WEB-INF/lib/commons-lang-2.6.jar WEB-INF/lib/commons-lo
 gging-1.1.1.jar WEB-INF/lib/slf4j-api-1.7.7.jar WEB-INF/lib/slf4j-log
 4j12-1.7.7.jar WEB-INF/lib/log4j-1.2.17.jar WEB-INF/lib/plugins-0.0.2
 .jar WEB-INF/lib/clusters-0.0.2.jar WEB-INF/lib/monitors-0.0.2.jar WE
 B-INF/lib/jetty-server-9.2.7.v20150116.jar WEB-INF/lib/javax.servlet-
 api-3.1.0.jar WEB-INF/lib/jetty-http-9.2.7.v20150116.jar WEB-INF/lib/
 jetty-util-9.2.7.v20150116.jar WEB-INF/lib/jetty-io-9.2.7.v20150116.j
 ar WEB-INF/lib/jetty-webapp-9.2.7.v20150116.jar WEB-INF/lib/jetty-xml
 -9.2.7.v20150116.jar WEB-INF/lib/jetty-servlet-9.2.7.v20150116.jar WE
 B-INF/lib/jetty-security-9.2.7.v20150116.jar WEB-INF/lib/gson-2.3.1.j
 ar
Created-By: Apache Maven 3.3.9
Main-Class: org.bit.linc.web.commons.StartWeb
Archiver-Version: Plexus Archiver
</code></pre><p>其中的Class-Path和Main-Class均已经改变。</p>
]]></content>
      
        <categories>
            
            <category> maven </category>
            
        </categories>
        
        
        <tags>
            
            <tag> maven </tag>
            
            <tag> javaWeb </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[maven多级项目使用slf4j+log4j，以及自定义配置文件路径]]></title>
      <url>/2017/03/23/maven%E5%A4%9A%E7%BA%A7%E9%A1%B9%E7%9B%AE%E4%BD%BF%E7%94%A8slf4j+log4j%E4%BB%A5%E5%8F%8A%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84%20-%20%E5%89%AF%E6%9C%AC/</url>
      <content type="html"><![CDATA[<p>我的maven多级结构如下：</p>
<pre><code>sysimple
    |--integration
    |--commons
        |--pom.xml
    |--plugins
        |--pom.xml
    |--web
        |--pom.xml
    |--pom.xml
</code></pre><p>其中依赖情况是： <a id="more"></a><br>web依赖于commons和plugins。plugins依赖于commons。integration中定义了打包的方法与资源文件。</p>
<p>首先在sysimple/pom.xml中管理slf4j的版本：</p>
<pre><code>在&lt;dependencyManagement&gt;&lt;/dependencyManagement&gt;中间添加：
    &lt;dependency&gt;
         &lt;groupId&gt;org.slf4j&lt;/groupId&gt;
         &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt;
         &lt;version&gt;1.7.7&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
         &lt;groupId&gt;org.slf4j&lt;/groupId&gt;
         &lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt;
         &lt;version&gt;1.7.7&lt;/version&gt;
    &lt;/dependency&gt;
</code></pre><p>由于所有的模块均引用commons，因此只需要在commons中添加slf4j的依赖即可：</p>
<pre><code>&lt;dependency&gt;
     &lt;groupId&gt;org.slf4j&lt;/groupId&gt;
     &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
     &lt;groupId&gt;org.slf4j&lt;/groupId&gt;
     &lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt;
&lt;/dependency&gt;
</code></pre><p>下面即可使用slf4j，在需要使用的地方以如下方式使用：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StartWeb</span> &#123;</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(StartWeb.<span class="keyword">class</span>);</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args)&#123;</div><div class="line">		logger.info(<span class="string">"this is a example"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>默认情况下，slf4j-log4j会在src/main/java中查找log4j.properties，如果需要指定配置文件的位置，需要在启动时手动加入Jvm的参数，我的例子中添加了-Dlog4j.configuration=file:../integration/conf/sysimple-log4j.properties。在使用绝对路径时是不需要使用file:的，linux端也不需要file:。在运行的时候，slf4j会根据你指定的路径去加载配置文件。配置文件的内容我给出以下例子， 读者可以另行查找配置文件的格式：</p>
<pre><code>log4j.rootLogger=INFO,system.out  
log4j.appender.system.out=org.apache.log4j.ConsoleAppender  
log4j.appender.system.out.layout=org.apache.log4j.PatternLayout  
log4j.appender.system.out.layout.ConversionPattern=SysimpleServer Logger--&gt;%5p{%F:%L}-%m%n 
log4j.logger.thisProject.file=INFO,thisProject.file.out  
log4j.appender.thisProject.file.out=org.apache.log4j.DailyRollingFileAppender
log4j.appender.thisProject.file.out.File=../integration/logs/sysimple-logs.log   
log4j.appender.thisProject.file.out.layout=org.apache.log4j.PatternLayout 
</code></pre>]]></content>
      
        <categories>
            
            <category> maven </category>
            
        </categories>
        
        
        <tags>
            
            <tag> maven </tag>
            
            <tag> log4j </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[jvm垃圾收集算法]]></title>
      <url>/2017/03/15/jvm%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E7%AE%97%E6%B3%95/</url>
      <content type="html"><![CDATA[<blockquote>
<p>来源：JVM虚拟机</p>
</blockquote>
<h1 id="标记-清除法"><a href="#标记-清除法" class="headerlink" title="标记-清除法"></a>标记-清除法</h1><p>最基础的收集算法是“标记-清除”（Mark-Sweep）算法，如同它的名字一样，算法分<br>为“标记”和“清除”两个阶段：首先标记出所有需要回收的对象，在标记完成后统一回收所有<br>被标记的对象，它的标记过程其实在前一节讲述对象标记判定时已经介绍过了。 之所以说它<br>是最基础的收集算法，是因为后续的收集算法都是基于这种思路并对其不足进行改进而得到<br>的。 它的主要不足有两个：==一个是效率问题，标记和清除两个过程的效率都不高；另一个是<br>空间问题，标记清除之后会产生大量不连续的内存碎片==，空间碎片太多可能会导致以后在程<br>序运行过程中需要分配较大对象时，无法找到足够的连续内存而不得不提前触发另一次垃圾<br>收集动作。<br><a id="more"></a></p>
<h1 id="复制算法"><a href="#复制算法" class="headerlink" title="复制算法"></a>复制算法</h1><p>为了解决效率问题，一种称为“复制”（Copying）的收集算法出现了，它将可用==内存按容<br>量划分为大小相等的两块，每次只使用其中的一块==。 ==当这一块的内存用完了，就将还存活着<br>的对象复制到另外一块上面，然后再把已使用过的内存空间一次清理掉==。 这样使得每次都是<br>对整个半区进行内存回收，内存分配时也就不用考虑内存碎片等复杂情况，只要移动堆顶指<br>针，按顺序分配内存即可，实现简单，运行高效。 只是这种算法的代价是将内存缩小为了原<br>来的一半，未免太高了一点。 复制算法的执行过程如图3-3所示。</p>
<p>现在的商业虚拟机都采用这种收集算法来回收新生代，IBM公司的专门研究表明，新生<br>代中的对象98%是“朝生夕死”的。所以并不需要按照1:1的比例来划分内存空间，==而是将内存<br>分为一块较大的Eden空间和两块较小的Survivor空间==，每次使用Eden和其中一块Survivor[1]。<br>当回收时，将Eden和Survivor中还存活着的对象一次性地复制到另外一块Survivor空间上，最<br>后清理掉Eden和刚才用过的Survivor空间。 HotSpot虚拟机默认Eden和Survivor的大小比例是<br>8:1，也就是每次新生代中可用内存空间为整个新生代容量的90%（80%+10%），只有10%<br>的内存会被“浪费”。 当然，98%的对象可回收只是一般场景下的数据，我们没有办法保证每<br>次回收都只有不多于10%的对象存活，当Survivor空间不够用时，需要依赖其他内存（这里<br>指老年代）进行分配担保（Handle Promotion）。</p>
<h1 id="标记整理算法"><a href="#标记整理算法" class="headerlink" title="标记整理算法"></a>标记整理算法</h1><p>复制收集算法在对象存活率较高时就要进行较多的复制操作，效率将会变低。 更关键的<br>是，如果不想浪费50%的空间，就需要有额外的空间进行分配担保，以应对被使用的内存中<br>所有对象都100%存活的极端情况，所以在老年代一般不能直接选用这种算法。<br>根据老年代的特点，有人提出了另外一种“标记-整理”（Mark-Compact）算法，标记过程<br>仍然与“标记-清除”算法一样，但后续步骤不是直接对可回收对象进行清理，而是让所有存<br>活的对象都向一端移动，然后直接清理掉端边界以外的内存。</p>
<h1 id="分代收集算法"><a href="#分代收集算法" class="headerlink" title="分代收集算法"></a>分代收集算法</h1><p>当前商业虚拟机的垃圾收集都采用“分代收集”（Generational Collection）算法，这种算<br>法并没有什么新的思想，==只是根据对象存活周期的不同将内存划分为几块==。 一般是把Java堆<br>分为新生代和老年代，这样就可以==根据各个年代的特点采用最适当的收集算法==。 在新生代<br>中，每次垃圾收集时都发现有大批对象死去，只有少量存活，那就选用复制算法，只需要付<br>出少量存活对象的复制成本就可以完成收集。 而老年代中因为对象存活率高、 没有额外空间<br>对它进行分配担保，就必须使用“标记—清理”或者“标记—整理”算法来进行回收。</p>
]]></content>
      
        <categories>
            
            <category> jvm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> jvm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[java对象的创建过程]]></title>
      <url>/2017/03/15/java%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%88%9B%E5%BB%BA%E8%BF%87%E7%A8%8B/</url>
      <content type="html"><![CDATA[<h1 id="对象的创建过程"><a href="#对象的创建过程" class="headerlink" title="对象的创建过程"></a>对象的创建过程</h1><blockquote>
<p>来源：JVM虚拟机</p>
</blockquote>
<p>Java是一门面向对象的编程语言，在Java程序运行过程中无时无刻都有对象被创建出来。在语言层面上，创建对象（例如克隆、反序列化）通常仅仅是一个new关键字而已，而在虚拟机中，对象（文中讨论的对象限于普通Java对象，不包括数组和Class对象等）的创建又是怎样一个过程呢？<br><a id="more"></a><br>虚拟机遇到一条new指令时，==首先将去检查这个指令的参数是否能在常量池中定位到一个类的符号引用，并且检查这个符号引用代表的类是否已被加载、解析和初始化过==。 如果没有，那必须先执行相应的类加载过程。</p>
<p>==在类加载检查通过后，接下来虚拟机将为新生对象分配内存==。==对象所需内存的大小在类加载完成后便可完全确定==（如何确定将在2.3.2节中介绍），为对象分配空间的任务等同于把一块确定大小的内存从Java堆中划分出来。++假设Java堆中内存是绝对规整的++，所有用过的内存都放在一边，空闲的内存放在另一边，中间放着一个指针作为分界点的指示器，那所分配内存就仅仅是把那个指针向空闲空间那边挪动一段与对象大小相等的距离，这种分配方式称为“++==指针碰撞==++”（Bump the Pointer）。如果Java堆中的内存并++不是规整的++，已使用的内存和空闲的内存相互交错，那就没有办法简单地进行指针碰撞了，虚拟机就必须维护一个列表，记录上哪些内存块是可用的，在分配的时候从列表中找到一块足够大的空间划分给对象实例，并更新列表上的记录，这种分配方式称为“==空闲列表==”（Free List）。 选择哪种分配方式由Java堆是否规整决定，而Java堆是否规整又由所采用的垃圾收集器是否带有压缩整理功能决定。 因此，在使用Serial、 ParNew等带Compact过程的收集器时，系统采用的分配算法是指针碰撞，而使用CMS这种基于Mark-Sweep算法的收集器时，通常采用空闲列表。</p>
<p>除如何划分可用空间之外，还有另外一个需要考虑的问题是对象创建在虚拟机中是非常频繁的行为，即使是仅仅修改一个指针所指向的位置，在并发情况下也并不是线程安全的，可能出现正在给对象A分配内存，指针还没来得及修改，对象B又同时使用了原来的指针来分配内存的情况。解决这个问题有两种方案，==一种是对分配内存空间的动作进行同步处理==——实际上虚拟机采用CAS配上失败重试的方式保证更新操作的原子性；==另一种是把内存分配的动作按照线程划分在不同的空间之中进行，即每个线程在Java堆中预先分配一小块内存，称为本地线程分配缓冲（Thread Local Allocation Buffer,TLAB）==。哪个线程要分配内存，就在哪个线程的TLAB上分配，只有TLAB用完并分配新的TLAB时，才需要同步锁定。虚拟机是否使用TLAB，可以通过-XX：+/-UseTLAB参数来设定。</p>
<p>内存分配完成后，==虚拟机需要将分配到的内存空间都初始化为零值（不包括对象头），如果使用TLAB，这一工作过程也可以提前至TLAB分配时进行==。 这一步操作保证了对象的实例字段在Java代码中可以不赋初始值就直接使用，程序能访问到这些字段的数据类型所对应的零值。</p>
<p>接下来，虚拟机要对对象进行必要的设置，例如这个对象是哪个类的实例、 如何才能找到类的元数据信息、 对象的哈希码、对象的GC分代年龄等信息。 这些信息存放在对象的对象头（Object Header）之中。根据虚拟机当前的运行状态的不同，如是否启用偏向锁等，对象头会有不同的设置方式。 关于对象头的具体内容，稍后再做详细介绍。</p>
<p>在上面工作都完成之后，从虚拟机的视角来看，一个新的对象已经产生了，但从Java程序的视角来看，对象创建才刚刚开始——＜init＞方法还没有执行，所有的字段都还为零。所以，一般来说（由字节码中是否跟随invokespecial指令所决定），==执行new指令之后会接着执行＜init＞方法==，把对象按照程序员的意愿进行初始化，这样一个真正可用的对象才算完全产生出来。</p>
]]></content>
      
        <categories>
            
            <category> jvm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> jvm </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
